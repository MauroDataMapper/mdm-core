buildscript {
    repositories {
        mavenLocal()
        maven {url "https://jenkins.cs.ox.ac.uk/artifactory/plugins-snapshot"}
        maven {url "https://jenkins.cs.ox.ac.uk/artifactory/plugins-release"}
        jcenter()

    }
    dependencies {
        classpath "ox.softeng.gradle:oxbrcinformatics-gradle-plugins:$oxbrcinformaticsGradlePluginsVersion"
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:hibernate5:$grailsHibernate5Version"
        classpath "org.grails.plugins:views-gradle:$grailsViewsVersion"
    }
}


plugins {
    id 'project-report'
}

apply plugin: "idea"
apply plugin: "war"
apply plugin: "org.grails.grails-web"
apply plugin: "org.grails.plugins.views-json"
apply plugin: "org.grails.plugins.views-markup"


apply plugin: 'ox.softeng.ox-brc-base'
apply plugin: 'ox.softeng.ox-brc-artifactory'

repositories {
    mavenLocal()
    maven {url "https://repo.grails.org/grails/core"}
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    provided "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-codecs"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-datasource"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails.plugins:cache", {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:hibernate5:$grailsHibernate5Version"
    compile "org.hibernate:hibernate-core"
    compile "org.grails.plugins:views-json:$grailsViewsVersion"
    compile "org.grails.plugins:views-json-templates:$grailsViewsVersion"
    compile "org.grails.plugins:views-markup:$grailsViewsVersion"
    compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    // Until the fixes are published we need to use our versions of the profiles
    profile "org.grails.profiles:rest-api", {
        transitive false
    }
    profile "org.grails.profiles:plugin", {
        transitive false
    }
    profile "org.grails.profiles:base:4.1.0.OXBRC", {
        transitive false
    }
    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    integrationTestRuntimeOnly "com.h2database:h2"
    runtime "org.apache.tomcat:tomcat-jdbc"
    runtime "javax.xml.bind:jaxb-api:$jaxbApiVersion"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.mockito:mockito-core"
    testCompile "io.micronaut:micronaut-http-client"
    testCompile "org.grails:grails-web-testing-support"
}

bootRun {
    ignoreExitValue true
    jvmArgs(
        '-Dspring.output.ansi.enabled=always',
        '-noverify',
        '-XX:TieredStopAtLevel=1')
    sourceResources sourceSets.main

    System.properties.each {prop ->
        systemProperty prop.key, prop.value
    }

    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
    systemProperty 'user.dir', projectDir
}

grails {
    plugins {
        compile project(':mdm-core')
        compile project(':mdm-plugin-authentication-basic')
        compile project(':mdm-plugin-datamodel')
        compile project(':mdm-plugin-terminology')
        compile project(':mdm-plugin-referencedata')
        //        compile project(':mdm-plugin-email-proxy')
        compile project(':mdm-security')
        compile project(':mdm-plugin-dataflow')
        compile project(':mdm-plugin-dataflow')
        compile project(':mdm-plugin-profile')
    }
}

apply from: 'dependencies.gradle'
apply from: "${rootDir}/gradle/additions/grails.gradle"

String testCategory = ''
String testPackage = ''

if (System.getProperty('grails.test.category')) {
    testCategory = System.getProperty('grails.test.category')
}
if (System.getProperty('grails.test.package')) {
    testPackage = System.getProperty('grails.test.package')
}


integrationTest {
    //    failFast true
    useJUnit {
        if(testCategory){
            includeCategories "uk.ac.ox.softeng.maurodatamapper.test.junit.${testCategory}"
        }else {
            excludeCategories 'uk.ac.ox.softeng.maurodatamapper.test.junit.TroubleTest'
        }
    }

    if(testPackage){
        logger.quiet('Filtering to tests on {}',"uk.ac.ox.softeng.maurodatamapper.testing.functional.${testPackage}.*")
        filter {
            includeTestsMatching "uk.ac.ox.softeng.maurodatamapper.testing.functional.${testPackage}.*"
        }

        binaryResultsDirectory.set(file("${project.testResultsDir}/${testPackage}/binary"))
        reports {
            junitXml.destination = file("${project.testResultsDir}/${testPackage}")

        }
        mergeTestReports.reportOn(file("${project.testResultsDir}/${testPackage}/binary"))

        systemProperty('mdm.logFileName', "e2e-${testPackage}.log")
    }

    if(testCategory){
        binaryResultsDirectory.set(file("${project.testResultsDir}/${testCategory}/binary"))
        reports {
            junitXml.destination = file("${project.testResultsDir}/${testCategory}")

        }
        mergeTestReports.reportOn(file("${project.testResultsDir}/${testCategory}/binary"))
    }
}

artifactoryPublish {
    skip = true
}
